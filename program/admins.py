from cache.admins import admins
from driver.veez import call_py
from pyrogram import Client, filters
from driver.decorators import authorized_users_only
from driver.filters import command, other_filters
from driver.queues import QUEUE, clear_queue
from driver.utils import skip_current_song, skip_item
from config import BOT_USERNAME, GROUP_SUPPORT, IMG_3, UPDATES_CHANNEL
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)


bttn = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üîô Quay l·∫°i", callback_data="cbmenu")]]
)


bcl = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üóë Close", callback_data="cls")]]
)


@Client.on_message(command(["tailaibot", f"tailaibot@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def update_admin(client, message):
    global admins
    new_admins = []
    new_ads = await client.get_chat_members(message.chat.id, filter="administrators")
    for u in new_ads:
        new_admins.append(u.user.id)
    admins[message.chat.id] = new_admins
    await message.reply_text(
        "‚úÖ Bot **t·∫£i l·∫°i m·ªôt c√°ch ch√≠nh x√°c !**\n‚úÖ ** Danh s√°ch qu·∫£n tr·ªã vi√™n ** ƒë√£ ** c·∫≠p nh·∫≠t !**"
    )


@Client.on_message(command(["skip", f"skip@{BOT_USERNAME}", "boqua"]) & other_filters)
@authorized_users_only
async def skip(client, m: Message):

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="‚Ä¢ M·¥á…¥·¥ú", callback_data="cbmenu"
                ),
                InlineKeyboardButton(
                    text="‚Ä¢ C ü·¥ès·¥á", callback_data="cls"
                ),
            ]
        ]
    )

    chat_id = m.chat.id
    if len(m.command) < 2:
        op = await skip_current_song(chat_id)
        if op == 0:
            await m.reply("‚ùå kh√¥ng c√≥ g√¨ hi·ªán ƒëang ch∆°i")
        elif op == 1:
            await m.reply("‚úÖ __H√†ng ƒë·ª£i__ ** tr·ªëng.**\n\n**‚Ä¢ userbot r·ªùi kh·ªèi cu·ªôc tr√≤ chuy·ªán tho·∫°i**")
        elif op == 2:
            await m.reply("üóëÔ∏è **X√≥a h√†ng ƒë·ª£i**\n\n**‚Ä¢ userbot r·ªùi kh·ªèi cu·ªôc tr√≤ chuy·ªán tho·∫°i**")
        else:
            await m.reply_photo(
                photo=f"{IMG_3}",
                caption=f"‚è≠ **ƒê√£ b·ªè qua b√†i h√°t ti·∫øp theo.**\n\nüè∑ **T√™n:** [{op[0]}]({op[1]})\nüí° **Tr·∫°ng th√°i:** `Playing`\nüéß **Y√™u c·∫ßu b·ªüi:** {m.from_user.mention()}",
                reply_markup=keyboard,
            )
    else:
        skip = m.text.split(None, 1)[1]
        OP = "üóë **removed song from queue:**"
        if chat_id in QUEUE:
            items = [int(x) for x in skip.split(" ") if x.isdigit()]
            items.sort(reverse=True)
            for x in items:
                if x == 0:
                    pass
                else:
                    hm = await skip_item(chat_id, x)
                    if hm == 0:
                        pass
                    else:
                        OP = OP + "\n" + f"**#{x}** - {hm}"
            await m.reply(OP)


@Client.on_message(
    command(["stop", f"stop@{BOT_USERNAME}", "end", f"end@{BOT_USERNAME}", "tat"])
    & other_filters
)
@authorized_users_only
async def stop(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.leave_group_call(chat_id)
            clear_queue(chat_id)
            await m.reply("‚úÖ Ng∆∞·ªùi d√πng ƒë√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi cu·ªôc tr√≤ chuy·ªán video.")
        except Exception as e:
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn**")


@Client.on_message(
    command(["pause", f"pause@{BOT_USERNAME}", "tamdung"]) & other_filters
)
@authorized_users_only
async def pause(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.pause_stream(chat_id)
            await m.reply(
                "‚è∏ **Theo d√µi b·ªã t·∫°m d·ª´ng.**\n\n‚Ä¢ ** ƒê·ªÉ ti·∫øp t·ª•c lu·ªìng, h√£y s·ª≠ d·ª•ng**\n¬ª /ti·∫øp t·ª•c l·ªánh."
            )
        except Exception as e:
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **nothing in streaming**")


@Client.on_message(
    command(["resume", f"resume@{BOT_USERNAME}", "tieptuc"]) & other_filters
)
@authorized_users_only
async def resume(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.resume_stream(chat_id)
            await m.reply(
                "‚ñ∂Ô∏è **ƒê√£ ti·∫øp t·ª•c theo d√µi.**\n\n‚Ä¢ **ƒê·ªÉ t·∫°m d·ª´ng lu·ªìng, h√£y s·ª≠ d·ª•ng**\n¬ª /l·ªánh t·∫°m d·ª´ng."
            )
        except Exception as e:
            await m.reply(f"üö´ **l·ªói:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **kh√¥ng c√≥ g√¨ trong ph√°t tr·ª±c tuy·∫øn**")


@Client.on_message(
    command(["mmute", f"mmute@{BOT_USERNAME}", "vcmute"]) & other_filters
)
@authorized_users_only
async def mute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.mute_stream(chat_id)
            await m.reply(
                "üîá **Userbot b·ªã t·∫Øt ti·∫øng.**\n\n‚Ä¢ **ƒê·ªÉ b·∫≠t ti·∫øng ng∆∞·ªùi d√πng, h√£y s·ª≠ d·ª•ng**\n¬ª /b·∫≠t ti·∫øng l·ªánh."
            )
        except Exception as e:
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **kh√¥ng c√≥ g√¨ trong ph√°t tr·ª±c tuy·∫øn**")


@Client.on_message(
    command(["munmute", f"munmute@{BOT_USERNAME}", "vcunmute"]) & other_filters
)
@authorized_users_only
async def unmute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.unmute_stream(chat_id)
            await m.reply(
                "üîä **Ng∆∞·ªùi d√πng ƒë√£ b·∫≠t ti·∫øng.**\n\n‚Ä¢ **ƒê·ªÉ t·∫Øt ti·∫øng userbot, h√£y s·ª≠ d·ª•ng**\n¬ª /l·ªánh t·∫Øt ti·∫øng."
            )
        except Exception as e:
            await m.reply(f"üö´ **l·ªói:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **kh√¥ng c√≥ g√¨ trong ph√°t tr·ª±c tuy·∫øn**")


@Client.on_callback_query(filters.regex("cbpause"))
async def cbpause(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("b·∫°n l√† Qu·∫£n tr·ªã vi√™n ·∫®n danh! \n \n ¬ªho√†n nguy√™n v·ªÅ t√†i kho·∫£n ng∆∞·ªùi d√πng t·ª´ quy·ªÅn qu·∫£n tr·ªã vi√™n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ch·ªâ qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán tho·∫°i m·ªõi c√≥ th·ªÉ nh·∫•n v√†o n√∫t n√†y !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.pause_stream(chat_id)
            await query.edit_message_text(
                "‚è∏ ph√°t tr·ª±c tuy·∫øn ƒë√£ t·∫°m d·ª´ng", reply_markup=bttn
            )
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`", reply_markup=bcl)
    else:
        await query.answer("‚ùå hi·ªán kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn", show_alert=True)


@Client.on_callback_query(filters.regex("cbresume"))
async def cbresume(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("b·∫°n l√† Qu·∫£n tr·ªã vi√™n ·∫®n danh! \n \n ¬ªho√†n nguy√™n v·ªÅ t√†i kho·∫£n ng∆∞·ªùi d√πng t·ª´ quy·ªÅn qu·∫£n tr·ªã vi√™n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ch·ªâ qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán tho·∫°i m·ªõi c√≥ th·ªÉ nh·∫•n v√†o n√∫t n√†y !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.resume_stream(chat_id)
            await query.edit_message_text(
                "‚ñ∂Ô∏è ph√°t tr·ª±c tuy·∫øn ƒë√£ ti·∫øp t·ª•c", reply_markup=bttn
            )
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`", reply_markup=bcl)
    else:
        await query.answer("‚ùåhi·ªán kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn", show_alert=True)


@Client.on_callback_query(filters.regex("cbstop"))
async def cbstop(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("b·∫°n l√† Qu·∫£n tr·ªã vi√™n ·∫®n danh! \n \n ¬ªho√†n nguy√™n v·ªÅ t√†i kho·∫£n ng∆∞·ªùi d√πng t·ª´ quy·ªÅn qu·∫£n tr·ªã vi√™n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ch·ªâ qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán tho·∫°i m·ªõi c√≥ th·ªÉ nh·∫•n v√†o n√∫t n√†y !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.leave_group_call(chat_id)
            clear_queue(chat_id)
            await query.edit_message_text("‚úÖ **lu·ªìng n√†y ƒë√£ k·∫øt th√∫c**", reply_markup=bcl)
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`", reply_markup=bcl)
    else:
        await query.answer("‚ùå hi·ªán kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn", show_alert=True)


@Client.on_callback_query(filters.regex("cbmute"))
async def cbmute(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("b·∫°n l√† Qu·∫£n tr·ªã vi√™n ·∫®n danh! \n \n ¬ªho√†n nguy√™n v·ªÅ t√†i kho·∫£n ng∆∞·ªùi d√πng t·ª´ quy·ªÅn qu·∫£n tr·ªã vi√™n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ch·ªâ qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán tho·∫°i m·ªõi c√≥ th·ªÉ nh·∫•n v√†o n√∫t n√†y !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.mute_stream(chat_id)
            await query.edit_message_text(
                "üîá userbot b·ªã t·∫Øt ti·∫øng th√†nh c√¥ng", reply_markup=bttn
            )
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`", reply_markup=bcl)
    else:
        await query.answer("‚ùå hi·ªán kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn", show_alert=True)


@Client.on_callback_query(filters.regex("cbunmute"))
async def cbunmute(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer("b·∫°n l√† Qu·∫£n tr·ªã vi√™n ·∫®n danh! \n \n ¬ªho√†n nguy√™n v·ªÅ t√†i kho·∫£n ng∆∞·ªùi d√πng t·ª´ quy·ªÅn qu·∫£n tr·ªã vi√™n.")
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ch·ªâ qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán tho·∫°i m·ªõi c√≥ th·ªÉ nh·∫•n v√†o n√∫t n√†y !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.unmute_stream(chat_id)
            await query.edit_message_text(
                "üîä userbot ƒë∆∞·ª£c b·∫≠t ti·∫øng th√†nh c√¥ng", reply_markup=bttn
            )
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`", reply_markup=bcl)
    else:
        await query.answer("‚ùå hi·ªán kh√¥ng c√≥ g√¨ ƒëang ph√°t tr·ª±c tuy·∫øn", show_alert=True)


@Client.on_message(
    command(["volume", f"volume@{BOT_USERNAME}", "amthanh"]) & other_filters
)
@authorized_users_only
async def change_volume(client, m: Message):
    range = m.command[1]
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.change_volume_call(chat_id, volume=int(range))
            await m.reply(
                f"‚úÖ **√¢m l∆∞·ª£ng ƒë∆∞·ª£c ƒë·∫∑t th√†nh** `{range}`%"
            )
        except Exception as e:
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **kh√¥ng c√≥ g√¨ trong ph√°t tr·ª±c tuy·∫øn**")
